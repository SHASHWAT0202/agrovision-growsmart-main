name: 🚀 Build, Test & Deploy AgroVision

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # 🧪 Test and Quality Checks
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint code
      run: npm run lint
      
    - name: 🧪 Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # 🏗️ Build Application
  build:
    name: 🏗️ Build Application  
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
        VITE_RAZORPAY_KEY_ID: ${{ secrets.VITE_RAZORPAY_KEY_ID }}
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 30

  # 📊 Performance Testing
  lighthouse:
    name: 📊 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: 🌐 Serve built files
      run: |
        npm install -g serve
        serve -s dist &
        sleep 5
        
    - name: 🏃‍♂️ Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.github/lighthouse/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run security audit
      run: npm audit --audit-level moderate
      
    - name: 🔒 Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # 🚀 Deploy to Staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: 🚀 Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        alias-domains: |
          agrovision-staging.vercel.app

  # 🌟 Deploy to Production (main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, lighthouse]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: 🌟 Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./
        
    - name: 📢 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 **AgroVision Release v${{ github.run_number }}**
          
          ## What's Changed
          - Automated release from main branch
          - All tests passing ✅
          - Security checks passed 🔒
          - Performance optimized 📊
          
          ## Deployment
          - 🌟 Production: [agrovision.vercel.app](https://agrovision.vercel.app)
          - 📊 Lighthouse Score: Available in Actions
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/main
        draft: false
        prerelease: false

  # 📱 Notify on Success/Failure
  notify:
    name: 📱 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: 📱 Slack Notification (Success)
      if: ${{ needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#agrovision-deployments'
        text: |
          🎉 *AgroVision Deployment Successful!*
          
          📋 *Branch:* `${{ github.ref_name }}`
          👤 *Author:* ${{ github.actor }}
          🔗 *Commit:* ${{ github.sha }}
          
          🚀 *Environment:* ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          ⏱️ *Duration:* ${{ job.duration }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 📱 Slack Notification (Failure)
      if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#agrovision-deployments'
        text: |
          ❌ *AgroVision Deployment Failed!*
          
          📋 *Branch:* `${{ github.ref_name }}`
          👤 *Author:* ${{ github.actor }}
          🔗 *Commit:* ${{ github.sha }}
          
          🚨 *Check logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}